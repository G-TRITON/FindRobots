{"version":3,"sources":["components/card.js","components/cardlist.js","components/searchbox.js","components/scroll.js","containers/app.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","username","className","alt","src","CardList","robots","card","map","user","i","key","id","SearchBox","searchfield","onSearch","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","this","searchField","isPending","filteredRobots","filter","robot","toLowerCase","includes","onRequest","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","initialstate_search","initialstate_robos","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b930013a.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css';\n\nconst Card = (props) => { \n\tconst {name, email, username} = props;\n\treturn(\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img alt=\"robo\" src={`https://robohash.org/${username}?150x150`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './card.js';\n\nconst CardList = ({robots}) => {\n\tconst card = robots.map((user, i) => {\n\t\treturn (<Card key={i} \n\t\tid={robots[i].id} \n\t\tname={robots[i].name} \n\t\tusername={robots[i].username} \n\t\temail={robots[i].email} />);\n\t})\n\n\treturn(\n\t<div>\n    \t{card}\n    </div>\n\t\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, onSearch}) => {\n\treturn(\n\t\t\t<div className='pa2'>\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' \n\t\t\ttype='search' \n\t\t\tplaceholder='search robots' \n\t\t\tonChange={onSearch}\n\t\t\t/>\n\t\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '70%'}}>\n\t\t\t\t{props.children}\n\t\t\t</div>\n\t\t)\n}\n\nexport default Scroll;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/cardlist';\nimport SearchBox from '../components/searchbox';\nimport Scroll from '../components/scroll';\nimport './app.css';\n\nimport { setSearchField, RequestRobots } from '../actions.js';\n\nconst mapStateToProps = state => {\n\treturn{\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn{\n\t\tonSearch: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequest: () => dispatch(RequestRobots())\n\t}\n}\n\nclass App extends Component{\n\trender(){\n\t\t\tconst {searchField, onSearch, robots, isPending} = this.props;\n\t\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\t\treturn isPending ? <h1>Loading...</h1> :\n\t\t(\n\t\t<div className='tc'>\n\t\t<h1 className='f1'>Robo Friends</h1>\n\t\t<SearchBox onSearch={onSearch}/>\n\t\t<Scroll>\n\t\t<CardList robots={filteredRobots} />\n\t\t</Scroll>\n\t\t</div>\n\t\t)\n\t}\n\tcomponentDidMount(){\n\t\tthis.props.onRequest();\n\t}\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, \n\tRequestRobos_pending,\n\tRequestRobos_success,\n\tRequestRobos_failed } from './constants.js';\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport const RequestRobots = () => (dispatch) => {\n\tdispatch({\n\t\ttype: RequestRobos_pending\n\t});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n  \t\t\t.then(response => response.json())\n  \t\t\t.then(data => dispatch({type: RequestRobos_success, payload: data}))\n  \t\t\t.catch(err => dispatch({type: RequestRobos_failed, payload: err}));\n\t\t\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const RequestRobos_pending = 'RequestRobos_pending';\nexport const RequestRobos_success = 'RequestRobos_success';\nexport const RequestRobos_failed = 'RequestRobos_failed'; ","import { CHANGE_SEARCH_FIELD, \n\tRequestRobos_pending,\n\tRequestRobos_success,\n\tRequestRobos_failed } from './constants.js';\n\nconst initialstate_search = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialstate_search, action={}) => {\n\tswitch(action.type){\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}\n\nconst initialstate_robos = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialstate_robos, action={}) => {\n\tswitch(action.type){\n\t\tcase RequestRobos_pending:\n\t\treturn Object.assign({}, state, {isPending: true});\n\t\tcase RequestRobos_success:\n\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\n\t\tcase RequestRobos_failed:\n\t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\n\t\tdefault:\n\t\treturn state;\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/app.js';\nimport 'tachyons';\nimport {searchRobots, requestRobots} from './reducers.js';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n  \t<App />\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.register();\n\n"],"sourceRoot":""}
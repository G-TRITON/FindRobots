{"version":3,"sources":["components/card.js","components/cardlist.js","components/searchbox.js","components/scroll.js","containers/app.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","username","className","alt","src","CardList","robots","card","map","user","i","key","id","SearchBox","searchfield","onSearch","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","state","bind","event","this","setState","target","value","filteredRobots","filter","robot","toLowerCase","includes","length","fetch","then","response","json","users","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kSAgBeA,G,MAbF,SAACC,GAAW,IACjBC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,SACpB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAA1B,cACnB,6BACC,4BAAKF,GACL,2BAAIC,OCSOK,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZC,EAAOD,EAAOE,KAAI,SAACC,EAAMC,GAC9B,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EACnBE,GAAIN,EAAOI,GAAGE,GACdb,KAAMO,EAAOI,GAAGX,KAChBE,SAAUK,EAAOI,GAAGT,SACpBD,MAAOM,EAAOI,GAAGV,WAGlB,OACA,6BACKO,ICASM,EAZG,SAAC,GAA4B,EAA3BC,YAA4B,IAAfC,EAAc,EAAdA,SAChC,OACE,yBAAKb,UAAU,OACf,2BAAOA,UAAU,mCACjBc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEEI,EARA,SAACrB,GACf,OACE,yBAAKsB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,QACnEzB,EAAM0B,WCsCIC,G,wDApCd,WAAY3B,GAAO,IAAD,8BACjB,cAAMA,IACD4B,MAAQ,CACZpB,OAAQ,GACRQ,YAAa,IAEd,EAAKC,SAAW,EAAKA,SAASY,KAAd,gBANC,E,qDAQTC,GACRC,KAAKC,SAAS,CAAChB,YAAac,EAAMG,OAAOC,U,+BAEjC,IAAD,EACwBH,KAAKH,MAA5BpB,EADD,EACCA,OAAQQ,EADT,EACSA,YACTmB,EAAiB3B,EAAO4B,QAAO,SAAAC,GACrC,OAAOA,EAAMpC,KAAKqC,cAAcC,SAASvB,EAAYsB,kBAErD,OAAQ9B,EAAOgC,OAEhB,yBAAKpC,UAAU,MACf,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWa,SAAUc,KAAKd,WAC1B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUT,OAAQ2B,MANO,4C,0CAWN,IAAD,OAClBM,MAAM,8CACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACxB,OAAQqC,W,GA/BzBC,c,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc851502.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css';\n\nconst Card = (props) => { \n\tconst {name, email, username} = props;\n\treturn(\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img alt=\"robo\" src={`https://robohash.org/${username}?150x150`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './card.js';\n\nconst CardList = ({robots}) => {\n\tconst card = robots.map((user, i) => {\n\t\treturn (<Card key={i} \n\t\tid={robots[i].id} \n\t\tname={robots[i].name} \n\t\tusername={robots[i].username} \n\t\temail={robots[i].email} />);\n\t})\n\n\treturn(\n\t<div>\n    \t{card}\n    </div>\n\t\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, onSearch}) => {\n\treturn(\n\t\t\t<div className='pa2'>\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' \n\t\t\ttype='search' \n\t\t\tplaceholder='search robots' \n\t\t\tonChange={onSearch}\n\t\t\t/>\n\t\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '70%'}}>\n\t\t\t\t{props.children}\n\t\t\t</div>\n\t\t)\n}\n\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../components/cardlist';\nimport SearchBox from '../components/searchbox';\nimport Scroll from '../components/scroll';\nimport './app.css';\n\nclass App extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t\tthis.onSearch = this.onSearch.bind(this);\n\t}\n\tonSearch(event){\n\t\tthis.setState({searchfield: event.target.value})\n\t}\n\trender(){\n\t\t\tconst {robots, searchfield} = this.state;\n\t\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\t\t\treturn !robots.length ? <h1>Loading...</h1> :\n\t\t(\n\t\t<div className='tc'>\n\t\t<h1 className='f1'>Robo Friends</h1>\n\t\t<SearchBox onSearch={this.onSearch}/>\n\t\t<Scroll>\n\t\t<CardList robots={filteredRobots} />\n\t\t</Scroll>\n\t\t</div>\n\t\t)\n\t}\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n  \t\t\t.then(response => response.json())\n  \t\t\t.then(users => this.setState({robots: users}))\n\t\t\n\t}\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app.js';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n\n"],"sourceRoot":""}